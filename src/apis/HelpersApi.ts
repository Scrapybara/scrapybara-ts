/* tslint:disable */
/* eslint-disable */
/**
 * Scrapybara API
 * Scrapybara API provides web automation, capybara-style. It allows users to generate, execute, and manage scripts.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FetchHtmlRequest,
  FetchHtmlResponse,
} from '../models/index';
import {
    FetchHtmlRequestFromJSON,
    FetchHtmlRequestToJSON,
    FetchHtmlResponseFromJSON,
    FetchHtmlResponseToJSON,
} from '../models/index';

export interface FetchHtmlOperationRequest {
    fetchHtmlRequest: FetchHtmlRequest;
}

/**
 * 
 */
export class HelpersApi extends runtime.BaseAPI {

    /**
     * Retrieves the HTML content of a specified URL, useful for preliminary data inspection.
     * Fetch HTML
     */
    async fetchHtmlRaw(requestParameters: FetchHtmlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchHtmlResponse>> {
        if (requestParameters['fetchHtmlRequest'] == null) {
            throw new runtime.RequiredError(
                'fetchHtmlRequest',
                'Required parameter "fetchHtmlRequest" was null or undefined when calling fetchHtml().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/fetch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FetchHtmlRequestToJSON(requestParameters['fetchHtmlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchHtmlResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the HTML content of a specified URL, useful for preliminary data inspection.
     * Fetch HTML
     */
    async fetchHtml(requestParameters: FetchHtmlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchHtmlResponse> {
        const response = await this.fetchHtmlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
